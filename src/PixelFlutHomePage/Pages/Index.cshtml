@page
@model IndexModel
@{
    ViewData["Title"] = "JWolf's PixelFlut client";
}

<div class="text-center">
    <h1 class="display-4">Welcome to JWolf's PixelFlut client!</h1>
    <img id="liveImage" src="/api/image" alt="Live Image" width="1000" />
    <p>Connect with your controller to join</p>
    <p>Code can be found at: <a href="https://github.com/MrJavaWolf/PixelFlutGame">https://github.com/MrJavaWolf/PixelFlutGame</a></p>
</div>

@section Scripts {

    <script>
        const imageElement = document.getElementById('liveImage');
        let isRequestInProgress = false;

        async function fetchImage() {
          if (isRequestInProgress) return;
          isRequestInProgress = true;

          try {
            const response = await fetch(`/api/image?t=${Date.now()}`, { cache: 'no-store' });
            if (!response.ok) throw new Error('Failed to fetch image');

            const blob = await response.blob();
            const imageUrl = URL.createObjectURL(blob);
            imageElement.src = imageUrl;

            // Revoke the previous object URL to avoid memory leaks
            if (imageElement.dataset.prevUrl) {
              URL.revokeObjectURL(imageElement.dataset.prevUrl);
            }
            imageElement.dataset.prevUrl = imageUrl;

          } catch (error) {
            console.error('Error fetching image:', error);
          } finally {
            isRequestInProgress = false;
          }
        }

        // Try to fetch an image every 100ms (10 times per second max)
        setInterval(fetchImage, 100);
    </script>

    <script src="js/Controller.min.js"></script>
    <script>
        // https://samiare.github.io/Controller.js/
        Controller.search();
        console.log("JWolf was here!");

        window.addEventListener('gc.controller.found', function (event) {
            var controller = event.detail.controller;
            console.log("Controller found at index " + controller.index + ".");
            console.log("'" + controller.name + "' is ready!");
        }, false);

        window.addEventListener('gc.controller.lost', function (event) {
            console.log("The controller at index " + event.detail.index + " has been disconnected.");
            console.log(Controller.getController(0));
        }, false);

        var delayInMilliseconds = 30;

        setInterval(function () {
            loop();
        }, delayInMilliseconds);

        function loop() {
            console.log("Controller length: " + Controller.controllerCount);
            for (let i = 0; i < Controller.controllerCount; i++) {
                var controller = Controller.getController(i);
                if (!controller) continue;
                if (!controller.inputs) continue;
                if (!controller.inputs.analogSticks) continue;
                if (!controller.inputs.analogSticks.LEFT_ANALOG_STICK) continue;
                if (!controller.inputs.analogSticks.LEFT_ANALOG_STICK.position) continue;
                if (!controller.inputs.buttons) continue;
                if (!controller.inputs.buttons.FACE_1) continue;
                if (!controller.inputs.buttons.FACE_2) continue;
                if (!controller.inputs.buttons.FACE_3) continue;
                if (!controller.inputs.buttons.FACE_4) continue;
                if (!controller.inputs.buttons.START) continue;
                if (!controller.inputs.buttons.SELECT) continue;
                let controllerName = "webpage_controller_" + i;
                let jsonBody = JSON.stringify({
                    x: controller.inputs.analogSticks.LEFT_ANALOG_STICK.position.x / 2 + 0.5,
                    y: controller.inputs.analogSticks.LEFT_ANALOG_STICK.position.y / 2 + 0.5,
                    isStartButtonPressed: controller.inputs.buttons.START.pressed,
                    isSelectButtonPressed: controller.inputs.buttons.SELECT.pressed,
                    isSouthButtonPressed: controller.inputs.buttons.FACE_1.pressed,
                    isEastButtonPressed: controller.inputs.buttons.FACE_2.pressed,
                    isWestButtonPressed: controller.inputs.buttons.FACE_3.pressed,
                    isNorthButtonPressed: controller.inputs.buttons.FACE_4.pressed,
                });
                console.log("Sending controller state for '" + controllerName + "': " + jsonBody);

                fetch("/api/ExternalGameInput?controllerId=" + controllerName, {
                    method: "POST",
                    body: jsonBody,
                    headers: {
                        "Content-type": "application/json; charset=UTF-8"
                    }
                });


            }
        }
    </script>
}
