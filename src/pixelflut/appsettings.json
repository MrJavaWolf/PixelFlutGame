{
  "Screen": {
    // The IP of the Pixelflut
    //"Ip": "10.42.1.12", // Labitat
    //"Ip": "2001:678:9ec:3000::1", // Bornhack 2022
    "Ip": "fcda:f100::d", // Bornhack 2023
    //"Ip": "192.168.1.110", // JWolf home
    //"Ip": "192.168.1.5", // JWolf home
    // The Port of the Pixelflut
    "Port": "5000-5999",
    // Set the on screen offset
    "OffsetX": 0,
    "OffsetY": 0,
    // The size of the game area
    "ResolutionX": 1920,
    "ResolutionY": 1080,
    //"ResolutionX": 960, 
    //"ResolutionY": 540, 
    // How many threads to be dedicated to send buffers to the pixel flut server
    "SenderThreads": 3,
    // How long the sender thread will sleep between each send, set to -1 to run 100% CPU per thread with no sleep at all.
    // Setting a sleep time may improve the experianced result if you are on a single core / slow CPU (i.e. raspberry pi)
    "SleepTimeBetweenSends": -1
  },
  "GameLoop": {
    // How many times a second the game loop will run. Set to -1 to run uncapped.
    "TargetGameLoopFPS": 60,
    // Which game to play, available values: Pong, RainbowTestImage, BlackTestImage, Image, Snake, Distributed
    "GameToPlay": "StickFigure"
  },
  "Gamepad": {
    // How big is the deadzone radius of the X/Y values (0 = left/up, 0.5 = middle, 1=right/down)
    // Used for analog sticks
    "DeadzoneRadius": 0.04,
    // How often will we scan for device changes
    "DeviceScanFrequency": "00:00:05"
  },
  "RainbowTestImage": {
    // Whether the test image should be moving
    "Moving": true,
    // The offset of the test image
    // Change this between runs to easiere be able to see how the change you made effects the rendering
    "TestImageOffset": 300
  },
  "Image": {
    //"Image": "Images/happy.jpg",
    "Image": "Images/happy.gif",
    //"Image": "Images/nyan_cat.gif",
    //"Image": "https://i.kym-cdn.com/photos/images/original/000/221/156/welcome-to-internet.jpg",
    //"Image": "https://i.kym-cdn.com/entries/icons/original/000/015/545/gam16.gif",
    // Connect a controller and move the image
    "Speed": 1500,
    "AutoMove": {
      // Should the image automatically move
      "Enable": false,
      // How fast the image should move in the X direction
      "SpeedX": 100,
      // How fast the image should move in the Y direction
      "SpeedY": 100,
      "MinX": -200,
      "MinY": 0,
      "MaxX": 1920,
      "MaxY": 1080
    }
  },
  "Pong": {
    // How big is the ball in pixel
    "BallRadius": 5,
    // How big is the border of the ball
    // Used for rendering only this helps better see where the ball is
    "BallBorder": 5,
    // How fast the ball initially moves
    "BallStartSpeed": 500,
    // How much the balls speed will increase everytime a player hits the ball
    "BallSpeedIncrease": 50,
    // How tall is the player in pixels
    "PlayerHeight": 200,
    // How wide is the player in pixels
    "PlayerWidth": 10,
    // How fast can the player move [pixels/per second]
    "PlayerSpeed": 500,
    // How big is the border of the player
    // Used for rendering only this helps better see where the player is
    "PlayerBorder": 5,
    // How far in from the edges are the player
    "PlayerDistanceToSides": 50,
    // How many times does a player need to score to win (Not implemented yet)
    "NumberOfGoalsToWin": 10,
    // When hitting the ball on the side of the player paddle, how steep an angle (in radians) is allowed.
    // Lowering the value will make the ball go more at an angle
    // Recommended range:
    // - Minimum: 0.20 (~11.5 degrees)
    // - Maximum: 0.75 (~45 degrees)
    "PlayerMaxRebounceAngle": 0.25
  },
  "Snake": {
    // How wide a tile is
    "TileWidth": 40,
    // How high a tile is 
    "TileHeight": 40,
    // How big the border between the tiles are
    "TileBorderSize": 2,
    // How many tiles long the player is at the start
    "SnakeStartSize": 4,
    // How fast the player moves at the start
    "StartTimeBetweenSteps": "00:00:00.2",
    // This value will be multiplied on the StartTimeBetweenSteps
    "TimeBetweenStepsDecreasePerFood": "0.95"
  },

  "StickFigure": {
    "Enable" : false
  },


  "DistributedServer": {
    "Enable": false,
    "Port": 11000,
    "NumberOfBuffersPerFrame": 100
  },
  "Distributed": {
    "Ip": "127.0.0.1",
    "Port": 11000
  },
  "Mqtt": {
    "Enable": false,
    "MqttServer": "jwolf.net",
    "User": "autohome",
    "Password": "autoHOME",
    "MqttTopic": "/bornhack2023/pixelflut",
    "PublishStatusMqttTopic": "/bornhack2023/status"
  },
  "Serilog": {
    "Using": [
      "Serilog.Sinks.Console"
    ],
    "MinimumLevel": {
      // Levels can be seen here: : https://github.com/serilog/serilog/wiki/Configuration-Basics#minimum-level
      "Default": "Debug",
      "Override": {
        "DevDecoder.HIDDevices.Devices": "Warning",
        "PixelFlut.Core.GamePadDevice": "Warning",
        "PixelFlut.Pong.PongGame": "Information",
        "PixelFlut.Core.PixelFlutScreenRenderer": "Information"
      }
    },
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "outputTemplate": "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] ({SourceContext}) {Message:lj}{NewLine}{Exception}"
        }
      }
    ],
    "Enrich": [
      "FromLogContext",
      "WithMachineName",
      "WithThreadId"
    ]
  }
}